// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v3.12.4
// source: svapi/media.proto

package svapi

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMediaServiceFeedShortMedia = "/apiService.svapi.MediaService/FeedShortMedia"
const OperationMediaServiceGetMediaById = "/apiService.svapi.MediaService/GetMediaById"
const OperationMediaServiceListPublishedMedia = "/apiService.svapi.MediaService/ListPublishedMedia"
const OperationMediaServicePreSign4UploadCover = "/apiService.svapi.MediaService/PreSign4UploadCover"
const OperationMediaServicePreSign4UploadMedia = "/apiService.svapi.MediaService/PreSign4UploadMedia"
const OperationMediaServiceReportFinishUpload = "/apiService.svapi.MediaService/ReportFinishUpload"
const OperationMediaServiceReportMediaFinishUpload = "/apiService.svapi.MediaService/ReportMediaFinishUpload"

type MediaServiceHTTPServer interface {
	// FeedShortMedia 刷媒体
	FeedShortMedia(context.Context, *FeedShortMediaRequest) (*FeedShortMediaResponse, error)
	// GetMediaById 获取媒体信息
	GetMediaById(context.Context, *GetMediaByIdRequest) (*GetMediaByIdResponse, error)
	// ListPublishedMedia 获取当前用户的发布媒体列表
	ListPublishedMedia(context.Context, *ListPublishedMediaRequest) (*ListPublishedMediaResponse, error)
	// PreSign4UploadCover 预注册上传封面
	PreSign4UploadCover(context.Context, *PreSign4UploadRequest) (*PreSign4UploadResponse, error)
	// PreSign4UploadMedia 预注册上传媒体
	PreSign4UploadMedia(context.Context, *PreSign4UploadMediaRequest) (*PreSign4UploadMediaResponse, error)
	// ReportFinishUpload 通用确认上传完成
	ReportFinishUpload(context.Context, *ReportFinishUploadRequest) (*ReportFinishUploadResponse, error)
	// ReportMediaFinishUpload 确认媒体上传完成
	ReportMediaFinishUpload(context.Context, *ReportMediaFinishUploadRequest) (*ReportMediaFinishUploadResponse, error)
}

func RegisterMediaServiceHTTPServer(s *http.Server, srv MediaServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/media/upload", _MediaService_PreSign4UploadMedia0_HTTP_Handler(srv))
	r.POST("/cover/upload", _MediaService_PreSign4UploadCover0_HTTP_Handler(srv))
	r.POST("/file/{file_id}/finish", _MediaService_ReportFinishUpload0_HTTP_Handler(srv))
	r.POST("/media/finish", _MediaService_ReportMediaFinishUpload0_HTTP_Handler(srv))
	r.POST("/media/feed", _MediaService_FeedShortMedia0_HTTP_Handler(srv))
	r.GET("/media/{media_id}", _MediaService_GetMediaById0_HTTP_Handler(srv))
	r.POST("/media/list", _MediaService_ListPublishedMedia0_HTTP_Handler(srv))
}

func _MediaService_PreSign4UploadMedia0_HTTP_Handler(srv MediaServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PreSign4UploadMediaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMediaServicePreSign4UploadMedia)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PreSign4UploadMedia(ctx, req.(*PreSign4UploadMediaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PreSign4UploadMediaResponse)
		return ctx.Result(200, reply)
	}
}

func _MediaService_PreSign4UploadCover0_HTTP_Handler(srv MediaServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PreSign4UploadRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMediaServicePreSign4UploadCover)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PreSign4UploadCover(ctx, req.(*PreSign4UploadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PreSign4UploadResponse)
		return ctx.Result(200, reply)
	}
}

func _MediaService_ReportFinishUpload0_HTTP_Handler(srv MediaServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReportFinishUploadRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMediaServiceReportFinishUpload)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReportFinishUpload(ctx, req.(*ReportFinishUploadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReportFinishUploadResponse)
		return ctx.Result(200, reply)
	}
}

func _MediaService_ReportMediaFinishUpload0_HTTP_Handler(srv MediaServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReportMediaFinishUploadRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMediaServiceReportMediaFinishUpload)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReportMediaFinishUpload(ctx, req.(*ReportMediaFinishUploadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReportMediaFinishUploadResponse)
		return ctx.Result(200, reply)
	}
}

func _MediaService_FeedShortMedia0_HTTP_Handler(srv MediaServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FeedShortMediaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMediaServiceFeedShortMedia)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FeedShortMedia(ctx, req.(*FeedShortMediaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FeedShortMediaResponse)
		return ctx.Result(200, reply)
	}
}

func _MediaService_GetMediaById0_HTTP_Handler(srv MediaServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMediaByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMediaServiceGetMediaById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMediaById(ctx, req.(*GetMediaByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMediaByIdResponse)
		return ctx.Result(200, reply)
	}
}

func _MediaService_ListPublishedMedia0_HTTP_Handler(srv MediaServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPublishedMediaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMediaServiceListPublishedMedia)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPublishedMedia(ctx, req.(*ListPublishedMediaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPublishedMediaResponse)
		return ctx.Result(200, reply)
	}
}

type MediaServiceHTTPClient interface {
	FeedShortMedia(ctx context.Context, req *FeedShortMediaRequest, opts ...http.CallOption) (rsp *FeedShortMediaResponse, err error)
	GetMediaById(ctx context.Context, req *GetMediaByIdRequest, opts ...http.CallOption) (rsp *GetMediaByIdResponse, err error)
	ListPublishedMedia(ctx context.Context, req *ListPublishedMediaRequest, opts ...http.CallOption) (rsp *ListPublishedMediaResponse, err error)
	PreSign4UploadCover(ctx context.Context, req *PreSign4UploadRequest, opts ...http.CallOption) (rsp *PreSign4UploadResponse, err error)
	PreSign4UploadMedia(ctx context.Context, req *PreSign4UploadMediaRequest, opts ...http.CallOption) (rsp *PreSign4UploadMediaResponse, err error)
	ReportFinishUpload(ctx context.Context, req *ReportFinishUploadRequest, opts ...http.CallOption) (rsp *ReportFinishUploadResponse, err error)
	ReportMediaFinishUpload(ctx context.Context, req *ReportMediaFinishUploadRequest, opts ...http.CallOption) (rsp *ReportMediaFinishUploadResponse, err error)
}

type MediaServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewMediaServiceHTTPClient(client *http.Client) MediaServiceHTTPClient {
	return &MediaServiceHTTPClientImpl{client}
}

func (c *MediaServiceHTTPClientImpl) FeedShortMedia(ctx context.Context, in *FeedShortMediaRequest, opts ...http.CallOption) (*FeedShortMediaResponse, error) {
	var out FeedShortMediaResponse
	pattern := "/media/feed"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMediaServiceFeedShortMedia))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MediaServiceHTTPClientImpl) GetMediaById(ctx context.Context, in *GetMediaByIdRequest, opts ...http.CallOption) (*GetMediaByIdResponse, error) {
	var out GetMediaByIdResponse
	pattern := "/media/{media_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMediaServiceGetMediaById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MediaServiceHTTPClientImpl) ListPublishedMedia(ctx context.Context, in *ListPublishedMediaRequest, opts ...http.CallOption) (*ListPublishedMediaResponse, error) {
	var out ListPublishedMediaResponse
	pattern := "/media/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMediaServiceListPublishedMedia))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MediaServiceHTTPClientImpl) PreSign4UploadCover(ctx context.Context, in *PreSign4UploadRequest, opts ...http.CallOption) (*PreSign4UploadResponse, error) {
	var out PreSign4UploadResponse
	pattern := "/cover/upload"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMediaServicePreSign4UploadCover))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MediaServiceHTTPClientImpl) PreSign4UploadMedia(ctx context.Context, in *PreSign4UploadMediaRequest, opts ...http.CallOption) (*PreSign4UploadMediaResponse, error) {
	var out PreSign4UploadMediaResponse
	pattern := "/media/upload"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMediaServicePreSign4UploadMedia))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MediaServiceHTTPClientImpl) ReportFinishUpload(ctx context.Context, in *ReportFinishUploadRequest, opts ...http.CallOption) (*ReportFinishUploadResponse, error) {
	var out ReportFinishUploadResponse
	pattern := "/file/{file_id}/finish"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMediaServiceReportFinishUpload))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MediaServiceHTTPClientImpl) ReportMediaFinishUpload(ctx context.Context, in *ReportMediaFinishUploadRequest, opts ...http.CallOption) (*ReportMediaFinishUploadResponse, error) {
	var out ReportMediaFinishUploadResponse
	pattern := "/media/finish"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMediaServiceReportMediaFinishUpload))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
