// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v3.12.4
// source: svapi/collection.proto

package svapi

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCollectionServiceAddMedia2Collection = "/apiService.svapi.CollectionService/AddMedia2Collection"
const OperationCollectionServiceCreateCollection = "/apiService.svapi.CollectionService/CreateCollection"
const OperationCollectionServiceListCollection = "/apiService.svapi.CollectionService/ListCollection"
const OperationCollectionServiceListMedia4Collection = "/apiService.svapi.CollectionService/ListMedia4Collection"
const OperationCollectionServiceRemoveCollection = "/apiService.svapi.CollectionService/RemoveCollection"
const OperationCollectionServiceRemoveMediaFromCollection = "/apiService.svapi.CollectionService/RemoveMediaFromCollection"
const OperationCollectionServiceUpdateCollection = "/apiService.svapi.CollectionService/UpdateCollection"

type CollectionServiceHTTPServer interface {
	// AddMedia2Collection 将媒体添加到收藏夹
	AddMedia2Collection(context.Context, *AddMedia2CollectionRequest) (*AddMedia2CollectionResponse, error)
	// CreateCollection 创建收藏夹
	CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error)
	// ListCollection 列出用户的收藏夹
	ListCollection(context.Context, *ListCollectionRequest) (*ListCollectionResponse, error)
	// ListMedia4Collection 列出收藏夹中的媒体
	ListMedia4Collection(context.Context, *ListMedia4CollectionRequest) (*ListMedia4CollectionResponse, error)
	// RemoveCollection 删除收藏夹
	RemoveCollection(context.Context, *RemoveCollectionRequest) (*RemoveCollectionResponse, error)
	// RemoveMediaFromCollection 从收藏夹中移除媒体
	RemoveMediaFromCollection(context.Context, *RemoveMediaFromCollectionRequest) (*RemoveMediaFromCollectionResponse, error)
	// UpdateCollection 更新收藏夹信息
	UpdateCollection(context.Context, *UpdateCollectionRequest) (*UpdateCollectionResponse, error)
}

func RegisterCollectionServiceHTTPServer(s *http.Server, srv CollectionServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/collection", _CollectionService_CreateCollection0_HTTP_Handler(srv))
	r.DELETE("/collection", _CollectionService_RemoveCollection0_HTTP_Handler(srv))
	r.GET("/collection", _CollectionService_ListCollection0_HTTP_Handler(srv))
	r.PUT("/collection", _CollectionService_UpdateCollection0_HTTP_Handler(srv))
	r.POST("/collection/media", _CollectionService_AddMedia2Collection0_HTTP_Handler(srv))
	r.DELETE("/collection/media", _CollectionService_RemoveMediaFromCollection0_HTTP_Handler(srv))
	r.GET("/collection/media", _CollectionService_ListMedia4Collection0_HTTP_Handler(srv))
}

func _CollectionService_CreateCollection0_HTTP_Handler(srv CollectionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCollectionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCollectionServiceCreateCollection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCollection(ctx, req.(*CreateCollectionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCollectionResponse)
		return ctx.Result(200, reply)
	}
}

func _CollectionService_RemoveCollection0_HTTP_Handler(srv CollectionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemoveCollectionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCollectionServiceRemoveCollection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveCollection(ctx, req.(*RemoveCollectionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RemoveCollectionResponse)
		return ctx.Result(200, reply)
	}
}

func _CollectionService_ListCollection0_HTTP_Handler(srv CollectionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCollectionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCollectionServiceListCollection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCollection(ctx, req.(*ListCollectionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCollectionResponse)
		return ctx.Result(200, reply)
	}
}

func _CollectionService_UpdateCollection0_HTTP_Handler(srv CollectionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCollectionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCollectionServiceUpdateCollection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCollection(ctx, req.(*UpdateCollectionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCollectionResponse)
		return ctx.Result(200, reply)
	}
}

func _CollectionService_AddMedia2Collection0_HTTP_Handler(srv CollectionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddMedia2CollectionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCollectionServiceAddMedia2Collection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddMedia2Collection(ctx, req.(*AddMedia2CollectionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddMedia2CollectionResponse)
		return ctx.Result(200, reply)
	}
}

func _CollectionService_RemoveMediaFromCollection0_HTTP_Handler(srv CollectionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemoveMediaFromCollectionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCollectionServiceRemoveMediaFromCollection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveMediaFromCollection(ctx, req.(*RemoveMediaFromCollectionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RemoveMediaFromCollectionResponse)
		return ctx.Result(200, reply)
	}
}

func _CollectionService_ListMedia4Collection0_HTTP_Handler(srv CollectionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMedia4CollectionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCollectionServiceListMedia4Collection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMedia4Collection(ctx, req.(*ListMedia4CollectionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMedia4CollectionResponse)
		return ctx.Result(200, reply)
	}
}

type CollectionServiceHTTPClient interface {
	AddMedia2Collection(ctx context.Context, req *AddMedia2CollectionRequest, opts ...http.CallOption) (rsp *AddMedia2CollectionResponse, err error)
	CreateCollection(ctx context.Context, req *CreateCollectionRequest, opts ...http.CallOption) (rsp *CreateCollectionResponse, err error)
	ListCollection(ctx context.Context, req *ListCollectionRequest, opts ...http.CallOption) (rsp *ListCollectionResponse, err error)
	ListMedia4Collection(ctx context.Context, req *ListMedia4CollectionRequest, opts ...http.CallOption) (rsp *ListMedia4CollectionResponse, err error)
	RemoveCollection(ctx context.Context, req *RemoveCollectionRequest, opts ...http.CallOption) (rsp *RemoveCollectionResponse, err error)
	RemoveMediaFromCollection(ctx context.Context, req *RemoveMediaFromCollectionRequest, opts ...http.CallOption) (rsp *RemoveMediaFromCollectionResponse, err error)
	UpdateCollection(ctx context.Context, req *UpdateCollectionRequest, opts ...http.CallOption) (rsp *UpdateCollectionResponse, err error)
}

type CollectionServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCollectionServiceHTTPClient(client *http.Client) CollectionServiceHTTPClient {
	return &CollectionServiceHTTPClientImpl{client}
}

func (c *CollectionServiceHTTPClientImpl) AddMedia2Collection(ctx context.Context, in *AddMedia2CollectionRequest, opts ...http.CallOption) (*AddMedia2CollectionResponse, error) {
	var out AddMedia2CollectionResponse
	pattern := "/collection/media"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCollectionServiceAddMedia2Collection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CollectionServiceHTTPClientImpl) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...http.CallOption) (*CreateCollectionResponse, error) {
	var out CreateCollectionResponse
	pattern := "/collection"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCollectionServiceCreateCollection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CollectionServiceHTTPClientImpl) ListCollection(ctx context.Context, in *ListCollectionRequest, opts ...http.CallOption) (*ListCollectionResponse, error) {
	var out ListCollectionResponse
	pattern := "/collection"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCollectionServiceListCollection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CollectionServiceHTTPClientImpl) ListMedia4Collection(ctx context.Context, in *ListMedia4CollectionRequest, opts ...http.CallOption) (*ListMedia4CollectionResponse, error) {
	var out ListMedia4CollectionResponse
	pattern := "/collection/media"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCollectionServiceListMedia4Collection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CollectionServiceHTTPClientImpl) RemoveCollection(ctx context.Context, in *RemoveCollectionRequest, opts ...http.CallOption) (*RemoveCollectionResponse, error) {
	var out RemoveCollectionResponse
	pattern := "/collection"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCollectionServiceRemoveCollection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CollectionServiceHTTPClientImpl) RemoveMediaFromCollection(ctx context.Context, in *RemoveMediaFromCollectionRequest, opts ...http.CallOption) (*RemoveMediaFromCollectionResponse, error) {
	var out RemoveMediaFromCollectionResponse
	pattern := "/collection/media"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCollectionServiceRemoveMediaFromCollection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CollectionServiceHTTPClientImpl) UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...http.CallOption) (*UpdateCollectionResponse, error) {
	var out UpdateCollectionResponse
	pattern := "/collection"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCollectionServiceUpdateCollection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
