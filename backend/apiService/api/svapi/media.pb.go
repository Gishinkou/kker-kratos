// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.12.4
// source: svapi/media.proto

package svapi

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MediaAuthor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: json:"id,omitempty,string"
	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty,string"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Avatar      string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	IsFollowing bool   `protobuf:"varint,4,opt,name=is_following,json=isFollowing,proto3" json:"is_following,omitempty"`
}

func (x *MediaAuthor) Reset() {
	*x = MediaAuthor{}
	mi := &file_svapi_media_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaAuthor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaAuthor) ProtoMessage() {}

func (x *MediaAuthor) ProtoReflect() protoreflect.Message {
	mi := &file_svapi_media_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaAuthor.ProtoReflect.Descriptor instead.
func (*MediaAuthor) Descriptor() ([]byte, []int) {
	return file_svapi_media_proto_rawDescGZIP(), []int{0}
}

func (x *MediaAuthor) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MediaAuthor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MediaAuthor) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *MediaAuthor) GetIsFollowing() bool {
	if x != nil {
		return x.IsFollowing
	}
	return false
}

type Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: json:"id,omitempty,string"
	Id       int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty,string"`                            // 媒体唯一标识
	Author   *MediaAuthor `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`                     // 媒体作者信息
	PlayUrl  string       `protobuf:"bytes,3,opt,name=play_url,json=playUrl,proto3" json:"play_url,omitempty"`    // 媒体播放地址
	CoverUrl string       `protobuf:"bytes,4,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"` // 媒体封面地址
	// @gotags: json:"favorite_count,omitempty,string"
	FavoriteCount int64 `protobuf:"varint,5,opt,name=favorite_count,json=favoriteCount,proto3" json:"favorite_count,omitempty,string"` // 媒体的点赞总数
	// @gotags: json:"comment_count,omitempty,string"
	CommentCount int64  `protobuf:"varint,6,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty,string"` // 媒体的评论总数
	IsFavorite   bool   `protobuf:"varint,7,opt,name=is_favorite,json=isFavorite,proto3" json:"is_favorite,omitempty"`       // true-已点赞，false-未点赞
	Title        string `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`                                    // 媒体标题
}

func (x *Media) Reset() {
	*x = Media{}
	mi := &file_svapi_media_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_svapi_media_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_svapi_media_proto_rawDescGZIP(), []int{1}
}

func (x *Media) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Media) GetAuthor() *MediaAuthor {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Media) GetPlayUrl() string {
	if x != nil {
		return x.PlayUrl
	}
	return ""
}

func (x *Media) GetCoverUrl() string {
	if x != nil {
		return x.CoverUrl
	}
	return ""
}

func (x *Media) GetFavoriteCount() int64 {
	if x != nil {
		return x.FavoriteCount
	}
	return 0
}

func (x *Media) GetCommentCount() int64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *Media) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

func (x *Media) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// 预注册上传媒体请求消息类型
type PreSign4UploadMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// md5 hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// 文件类型，默认mp4
	FileType string `protobuf:"bytes,2,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	// 文件大小，单位byte
	// @gotags: json:"size,omitempty,string"
	Size int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty,string"`
	// 文件名
	Filename string `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *PreSign4UploadMediaRequest) Reset() {
	*x = PreSign4UploadMediaRequest{}
	mi := &file_svapi_media_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreSign4UploadMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSign4UploadMediaRequest) ProtoMessage() {}

func (x *PreSign4UploadMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svapi_media_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSign4UploadMediaRequest.ProtoReflect.Descriptor instead.
func (*PreSign4UploadMediaRequest) Descriptor() ([]byte, []int) {
	return file_svapi_media_proto_rawDescGZIP(), []int{2}
}

func (x *PreSign4UploadMediaRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *PreSign4UploadMediaRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *PreSign4UploadMediaRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PreSign4UploadMediaRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// 预注册上传媒体响应消息类型
type PreSign4UploadMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// minio上传地址
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// 文件id
	// @gotags: json:"file_id,omitempty,string"
	FileId int64 `protobuf:"varint,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty,string"`
}

func (x *PreSign4UploadMediaResponse) Reset() {
	*x = PreSign4UploadMediaResponse{}
	mi := &file_svapi_media_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreSign4UploadMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSign4UploadMediaResponse) ProtoMessage() {}

func (x *PreSign4UploadMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svapi_media_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSign4UploadMediaResponse.ProtoReflect.Descriptor instead.
func (*PreSign4UploadMediaResponse) Descriptor() ([]byte, []int) {
	return file_svapi_media_proto_rawDescGZIP(), []int{3}
}

func (x *PreSign4UploadMediaResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PreSign4UploadMediaResponse) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

// 通用小文件单次上传请求消息类型
type PreSign4UploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// md5 hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// 文件类型，默认mp4
	FileType string `protobuf:"bytes,2,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	// 文件大小，单位byte
	// @gotags: json:"size,omitempty,string"
	Size int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty,string"`
	// 文件名
	Filename string `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *PreSign4UploadRequest) Reset() {
	*x = PreSign4UploadRequest{}
	mi := &file_svapi_media_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreSign4UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSign4UploadRequest) ProtoMessage() {}

func (x *PreSign4UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svapi_media_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSign4UploadRequest.ProtoReflect.Descriptor instead.
func (*PreSign4UploadRequest) Descriptor() ([]byte, []int) {
	return file_svapi_media_proto_rawDescGZIP(), []int{4}
}

func (x *PreSign4UploadRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *PreSign4UploadRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *PreSign4UploadRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PreSign4UploadRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// 通用小文件单次上传响应消息类型
type PreSign4UploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// minio上传地址
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// 文件id
	// @gotags: json:"file_id,omitempty,string"
	FileId int64 `protobuf:"varint,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty,string"`
}

func (x *PreSign4UploadResponse) Reset() {
	*x = PreSign4UploadResponse{}
	mi := &file_svapi_media_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreSign4UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSign4UploadResponse) ProtoMessage() {}

func (x *PreSign4UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svapi_media_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSign4UploadResponse.ProtoReflect.Descriptor instead.
func (*PreSign4UploadResponse) Descriptor() ([]byte, []int) {
	return file_svapi_media_proto_rawDescGZIP(), []int{5}
}

func (x *PreSign4UploadResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PreSign4UploadResponse) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

// 确认媒体上传完成请求消息类型
type ReportMediaFinishUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 文件id
	// @gotags: json:"file_id,omitempty,string"
	FileId int64 `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty,string"`
	// 媒体标题
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// 媒体封面地址
	CoverUrl string `protobuf:"bytes,4,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	// 媒体描述
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// 媒体地址
	MediaUrl string `protobuf:"bytes,6,opt,name=media_url,json=mediaUrl,proto3" json:"media_url,omitempty"`
}

func (x *ReportMediaFinishUploadRequest) Reset() {
	*x = ReportMediaFinishUploadRequest{}
	mi := &file_svapi_media_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportMediaFinishUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMediaFinishUploadRequest) ProtoMessage() {}

func (x *ReportMediaFinishUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svapi_media_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMediaFinishUploadRequest.ProtoReflect.Descriptor instead.
func (*ReportMediaFinishUploadRequest) Descriptor() ([]byte, []int) {
	return file_svapi_media_proto_rawDescGZIP(), []int{6}
}

func (x *ReportMediaFinishUploadRequest) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *ReportMediaFinishUploadRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReportMediaFinishUploadRequest) GetCoverUrl() string {
	if x != nil {
		return x.CoverUrl
	}
	return ""
}

func (x *ReportMediaFinishUploadRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ReportMediaFinishUploadRequest) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

// 确认媒体上传完成响应消息类型
type ReportMediaFinishUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 媒体id
	// @gotags: json:"media_id,omitempty,string"
	MediaId int64 `protobuf:"varint,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty,string"`
}

func (x *ReportMediaFinishUploadResponse) Reset() {
	*x = ReportMediaFinishUploadResponse{}
	mi := &file_svapi_media_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportMediaFinishUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMediaFinishUploadResponse) ProtoMessage() {}

func (x *ReportMediaFinishUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svapi_media_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMediaFinishUploadResponse.ProtoReflect.Descriptor instead.
func (*ReportMediaFinishUploadResponse) Descriptor() ([]byte, []int) {
	return file_svapi_media_proto_rawDescGZIP(), []int{7}
}

func (x *ReportMediaFinishUploadResponse) GetMediaId() int64 {
	if x != nil {
		return x.MediaId
	}
	return 0
}

// 通用确认上传完成请求消息类型
type ReportFinishUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 文件id
	// @gotags: json:"file_id,omitempty,string"
	FileId int64 `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty,string"`
}

func (x *ReportFinishUploadRequest) Reset() {
	*x = ReportFinishUploadRequest{}
	mi := &file_svapi_media_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportFinishUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportFinishUploadRequest) ProtoMessage() {}

func (x *ReportFinishUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svapi_media_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportFinishUploadRequest.ProtoReflect.Descriptor instead.
func (*ReportFinishUploadRequest) Descriptor() ([]byte, []int) {
	return file_svapi_media_proto_rawDescGZIP(), []int{8}
}

func (x *ReportFinishUploadRequest) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

// 通用确认上传完成响应消息类型
type ReportFinishUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ReportFinishUploadResponse) Reset() {
	*x = ReportFinishUploadResponse{}
	mi := &file_svapi_media_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportFinishUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportFinishUploadResponse) ProtoMessage() {}

func (x *ReportFinishUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svapi_media_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportFinishUploadResponse.ProtoReflect.Descriptor instead.
func (*ReportFinishUploadResponse) Descriptor() ([]byte, []int) {
	return file_svapi_media_proto_rawDescGZIP(), []int{9}
}

func (x *ReportFinishUploadResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// 刷媒体请求消息类型
type FeedShortMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: json:"latest_time,omitempty,string"
	LatestTime int64 `protobuf:"varint,1,opt,name=latest_time,json=latestTime,proto3" json:"latest_time,omitempty,string"` // 可选参数，限制返回媒体的最新投稿时间戳，精确到秒，不填表示当前时间
	// @gotags: json:"user_id,omitempty,string"
	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty,string"`
	// @gotags: json:"feed_num,omitempty,string"
	FeedNum int64 `protobuf:"varint,3,opt,name=feed_num,json=feedNum,proto3" json:"feed_num,omitempty,string"` // 返回媒体的数量
}

func (x *FeedShortMediaRequest) Reset() {
	*x = FeedShortMediaRequest{}
	mi := &file_svapi_media_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedShortMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedShortMediaRequest) ProtoMessage() {}

func (x *FeedShortMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svapi_media_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedShortMediaRequest.ProtoReflect.Descriptor instead.
func (*FeedShortMediaRequest) Descriptor() ([]byte, []int) {
	return file_svapi_media_proto_rawDescGZIP(), []int{10}
}

func (x *FeedShortMediaRequest) GetLatestTime() int64 {
	if x != nil {
		return x.LatestTime
	}
	return 0
}

func (x *FeedShortMediaRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FeedShortMediaRequest) GetFeedNum() int64 {
	if x != nil {
		return x.FeedNum
	}
	return 0
}

// 刷媒体响应消息类型
type FeedShortMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta   *Metadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Medias []*Media  `protobuf:"bytes,2,rep,name=medias,proto3" json:"medias,omitempty"`
	// @gotags: json:"next_time,omitempty,string"
	NextTime int64 `protobuf:"varint,3,opt,name=next_time,json=nextTime,proto3" json:"next_time,omitempty,string"` // 本次返回的媒体中，发布最早的时间，作为下次请求时的latest_time
}

func (x *FeedShortMediaResponse) Reset() {
	*x = FeedShortMediaResponse{}
	mi := &file_svapi_media_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedShortMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedShortMediaResponse) ProtoMessage() {}

func (x *FeedShortMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svapi_media_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedShortMediaResponse.ProtoReflect.Descriptor instead.
func (*FeedShortMediaResponse) Descriptor() ([]byte, []int) {
	return file_svapi_media_proto_rawDescGZIP(), []int{11}
}

func (x *FeedShortMediaResponse) GetMeta() *Metadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *FeedShortMediaResponse) GetMedias() []*Media {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *FeedShortMediaResponse) GetNextTime() int64 {
	if x != nil {
		return x.NextTime
	}
	return 0
}

// 获取媒体信息请求消息类型
type GetMediaByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: json:"media_id,omitempty,string"
	MediaId int64 `protobuf:"varint,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty,string"`
}

func (x *GetMediaByIdRequest) Reset() {
	*x = GetMediaByIdRequest{}
	mi := &file_svapi_media_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMediaByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMediaByIdRequest) ProtoMessage() {}

func (x *GetMediaByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svapi_media_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMediaByIdRequest.ProtoReflect.Descriptor instead.
func (*GetMediaByIdRequest) Descriptor() ([]byte, []int) {
	return file_svapi_media_proto_rawDescGZIP(), []int{12}
}

func (x *GetMediaByIdRequest) GetMediaId() int64 {
	if x != nil {
		return x.MediaId
	}
	return 0
}

// 获取媒体信息响应消息类型
type GetMediaByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Media *Media `protobuf:"bytes,2,opt,name=media,proto3" json:"media,omitempty"`
}

func (x *GetMediaByIdResponse) Reset() {
	*x = GetMediaByIdResponse{}
	mi := &file_svapi_media_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMediaByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMediaByIdResponse) ProtoMessage() {}

func (x *GetMediaByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svapi_media_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMediaByIdResponse.ProtoReflect.Descriptor instead.
func (*GetMediaByIdResponse) Descriptor() ([]byte, []int) {
	return file_svapi_media_proto_rawDescGZIP(), []int{13}
}

func (x *GetMediaByIdResponse) GetMedia() *Media {
	if x != nil {
		return x.Media
	}
	return nil
}

// 获取当前用户的发布媒体列表请求消息类型
type ListPublishedMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: json:"user_id,omitempty,string"
	UserId     int64              `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty,string"`
	Pagination *PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListPublishedMediaRequest) Reset() {
	*x = ListPublishedMediaRequest{}
	mi := &file_svapi_media_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPublishedMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublishedMediaRequest) ProtoMessage() {}

func (x *ListPublishedMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svapi_media_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublishedMediaRequest.ProtoReflect.Descriptor instead.
func (*ListPublishedMediaRequest) Descriptor() ([]byte, []int) {
	return file_svapi_media_proto_rawDescGZIP(), []int{14}
}

func (x *ListPublishedMediaRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListPublishedMediaRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// 获取当前用户的发布媒体列表响应消息类型
type ListPublishedMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaList  []*Media            `protobuf:"bytes,2,rep,name=media_list,json=mediaList,proto3" json:"media_list,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListPublishedMediaResponse) Reset() {
	*x = ListPublishedMediaResponse{}
	mi := &file_svapi_media_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPublishedMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublishedMediaResponse) ProtoMessage() {}

func (x *ListPublishedMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svapi_media_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublishedMediaResponse.ProtoReflect.Descriptor instead.
func (*ListPublishedMediaResponse) Descriptor() ([]byte, []int) {
	return file_svapi_media_proto_rawDescGZIP(), []int{15}
}

func (x *ListPublishedMediaResponse) GetMediaList() []*Media {
	if x != nil {
		return x.MediaList
	}
	return nil
}

func (x *ListPublishedMediaResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

var File_svapi_media_proto protoreflect.FileDescriptor

var file_svapi_media_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x76, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	0x22, 0x89, 0x02, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x7d, 0x0a, 0x1a,
	0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x34, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x1b, 0x50,
	0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x34, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x34, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x43, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x34, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55,
	0x72, 0x6c, 0x22, 0x3c, 0x0a, 0x1f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64,
	0x22, 0x34, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x7e, 0x0a, 0x15, 0x46, 0x65, 0x65, 0x64, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x07, 0x66,
	0x65, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x22, 0x96, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x65, 0x64, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x76, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x2f, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x76, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x39, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20,
	0x00, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x76, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x22, 0x82, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x76, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0xd3, 0x07, 0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x34, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2c, 0x2e, 0x61,
	0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x34, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x34, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x34,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x61, 0x70,
	0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x34, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x34,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x2b, 0x2e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x76, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61,
	0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x7b, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x98, 0x01,
	0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x7b, 0x0a, 0x0e, 0x46, 0x65, 0x65, 0x64,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x65,
	0x65, 0x64, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2f, 0x66, 0x65, 0x65, 0x64, 0x12, 0x78, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x42, 0x79, 0x49, 0x64, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2f, 0x7b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0x87, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x76, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x6b, 0x6f,
	0x75, 0x2f, 0x6b, 0x6b, 0x65, 0x72, 0x2d, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x76, 0x61, 0x70, 0x69, 0x3b, 0x73, 0x76, 0x61, 0x70, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svapi_media_proto_rawDescOnce sync.Once
	file_svapi_media_proto_rawDescData = file_svapi_media_proto_rawDesc
)

func file_svapi_media_proto_rawDescGZIP() []byte {
	file_svapi_media_proto_rawDescOnce.Do(func() {
		file_svapi_media_proto_rawDescData = protoimpl.X.CompressGZIP(file_svapi_media_proto_rawDescData)
	})
	return file_svapi_media_proto_rawDescData
}

var file_svapi_media_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_svapi_media_proto_goTypes = []any{
	(*MediaAuthor)(nil),                     // 0: apiService.svapi.MediaAuthor
	(*Media)(nil),                           // 1: apiService.svapi.media
	(*PreSign4UploadMediaRequest)(nil),      // 2: apiService.svapi.PreSign4UploadMediaRequest
	(*PreSign4UploadMediaResponse)(nil),     // 3: apiService.svapi.PreSign4UploadMediaResponse
	(*PreSign4UploadRequest)(nil),           // 4: apiService.svapi.PreSign4UploadRequest
	(*PreSign4UploadResponse)(nil),          // 5: apiService.svapi.PreSign4UploadResponse
	(*ReportMediaFinishUploadRequest)(nil),  // 6: apiService.svapi.ReportMediaFinishUploadRequest
	(*ReportMediaFinishUploadResponse)(nil), // 7: apiService.svapi.ReportMediaFinishUploadResponse
	(*ReportFinishUploadRequest)(nil),       // 8: apiService.svapi.ReportFinishUploadRequest
	(*ReportFinishUploadResponse)(nil),      // 9: apiService.svapi.ReportFinishUploadResponse
	(*FeedShortMediaRequest)(nil),           // 10: apiService.svapi.FeedShortMediaRequest
	(*FeedShortMediaResponse)(nil),          // 11: apiService.svapi.FeedShortMediaResponse
	(*GetMediaByIdRequest)(nil),             // 12: apiService.svapi.GetMediaByIdRequest
	(*GetMediaByIdResponse)(nil),            // 13: apiService.svapi.GetMediaByIdResponse
	(*ListPublishedMediaRequest)(nil),       // 14: apiService.svapi.ListPublishedMediaRequest
	(*ListPublishedMediaResponse)(nil),      // 15: apiService.svapi.ListPublishedMediaResponse
	(*Metadata)(nil),                        // 16: apiService.svapi.Metadata
	(*PaginationRequest)(nil),               // 17: apiService.svapi.PaginationRequest
	(*PaginationResponse)(nil),              // 18: apiService.svapi.PaginationResponse
}
var file_svapi_media_proto_depIdxs = []int32{
	0,  // 0: apiService.svapi.media.author:type_name -> apiService.svapi.MediaAuthor
	16, // 1: apiService.svapi.FeedShortMediaResponse.meta:type_name -> apiService.svapi.Metadata
	1,  // 2: apiService.svapi.FeedShortMediaResponse.medias:type_name -> apiService.svapi.media
	1,  // 3: apiService.svapi.GetMediaByIdResponse.media:type_name -> apiService.svapi.media
	17, // 4: apiService.svapi.ListPublishedMediaRequest.pagination:type_name -> apiService.svapi.PaginationRequest
	1,  // 5: apiService.svapi.ListPublishedMediaResponse.media_list:type_name -> apiService.svapi.media
	18, // 6: apiService.svapi.ListPublishedMediaResponse.pagination:type_name -> apiService.svapi.PaginationResponse
	2,  // 7: apiService.svapi.MediaService.PreSign4UploadMedia:input_type -> apiService.svapi.PreSign4UploadMediaRequest
	4,  // 8: apiService.svapi.MediaService.PreSign4UploadCover:input_type -> apiService.svapi.PreSign4UploadRequest
	8,  // 9: apiService.svapi.MediaService.ReportFinishUpload:input_type -> apiService.svapi.ReportFinishUploadRequest
	6,  // 10: apiService.svapi.MediaService.ReportMediaFinishUpload:input_type -> apiService.svapi.ReportMediaFinishUploadRequest
	10, // 11: apiService.svapi.MediaService.FeedShortMedia:input_type -> apiService.svapi.FeedShortMediaRequest
	12, // 12: apiService.svapi.MediaService.GetMediaById:input_type -> apiService.svapi.GetMediaByIdRequest
	14, // 13: apiService.svapi.MediaService.ListPublishedMedia:input_type -> apiService.svapi.ListPublishedMediaRequest
	3,  // 14: apiService.svapi.MediaService.PreSign4UploadMedia:output_type -> apiService.svapi.PreSign4UploadMediaResponse
	5,  // 15: apiService.svapi.MediaService.PreSign4UploadCover:output_type -> apiService.svapi.PreSign4UploadResponse
	9,  // 16: apiService.svapi.MediaService.ReportFinishUpload:output_type -> apiService.svapi.ReportFinishUploadResponse
	7,  // 17: apiService.svapi.MediaService.ReportMediaFinishUpload:output_type -> apiService.svapi.ReportMediaFinishUploadResponse
	11, // 18: apiService.svapi.MediaService.FeedShortMedia:output_type -> apiService.svapi.FeedShortMediaResponse
	13, // 19: apiService.svapi.MediaService.GetMediaById:output_type -> apiService.svapi.GetMediaByIdResponse
	15, // 20: apiService.svapi.MediaService.ListPublishedMedia:output_type -> apiService.svapi.ListPublishedMediaResponse
	14, // [14:21] is the sub-list for method output_type
	7,  // [7:14] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_svapi_media_proto_init() }
func file_svapi_media_proto_init() {
	if File_svapi_media_proto != nil {
		return
	}
	file_svapi_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svapi_media_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svapi_media_proto_goTypes,
		DependencyIndexes: file_svapi_media_proto_depIdxs,
		MessageInfos:      file_svapi_media_proto_msgTypes,
	}.Build()
	File_svapi_media_proto = out.File
	file_svapi_media_proto_rawDesc = nil
	file_svapi_media_proto_goTypes = nil
	file_svapi_media_proto_depIdxs = nil
}
